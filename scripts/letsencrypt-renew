#!/bin/bash

####################### 
# READ ONLY VARIABLES #
#######################

readonly PROGNAME=`basename "$0"`
readonly SCRIPT_HOME=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
readonly SCRIPT_PARENT_DIR=$( cd ${SCRIPT_HOME} && cd .. && pwd )

#################### 
# GLOBAL VARIABLES #
####################

FLAG_DRYRUN=false

########## 
# SOURCE #
##########

for functionFile in ${SCRIPT_HOME}/bash-script-collection/functions/*.sh; do 
  source ${functionFile}
done

##########
# SCRIPT #
##########

usage_message () {
  echo """Usage:
    $PROGNAME [OPT ..]
      --dns)           ... wrapper for acme.sh --dns. e.g. '--dns dns_aws' to use the Amazon Route53 api
      -f | --force)    ... used to force to install or force to renew a cert immediately
      --staging)       ... use staging server, just for test. 
      
      -d | --dryrun)   ... dryrun
      
      -h | --help)     ... help"""
}
readonly -f usage_message
[ "$?" -eq "0" ] || return $?

main () {
  # INITIAL VALUES
  local certdir=/mnt/openshift/certificates
  local acme_options=""

  # GETOPT
  OPTS=`getopt -o dhf --long dryrun,help,force,staging,dns: -- "$@"`
  if [ $? != 0 ]; then
    print_stderr "failed to fetch options via getopt"
    exit $EXIT_FAILURE
  fi
  eval set -- "$OPTS"
  while true ; do
    case "$1" in
      --dns) 
        acme_options="${acme_options} --dns ${2}"
        shift 2
        ;; 
      -f | --force) 
        acme_options="${acme_options} --force";
        shift;
        ;; 
      --staging) 
        acme_options="${acme_options} --staging"
        shift
        ;; 
      -d | --dryrun) 
        FLAG_DRYRUN=true;
        shift;
        ;; 
      -h | --help) 
        usage_message; 
        exit 0;
        ;;
      *) 
        break
        ;;
    esac
  done

  ####
  # CHECK INPUT
  # check if all required options are given

  ####
  # PREFLIGHT
  
  if [[ ! -z ${ACME_HOME+x} ]]; then
    acme_options="${acme_options} --home ${ACME_HOME}"
  fi
  
  execute "oc whoami -c"

  ####
  # CORE LOGIC
  
  # get openshift api domain name
  local le_api=$(\
    oc whoami --show-server |
    cut -f 2 -d ':' |
    cut -f 3 -d '/' |
    sed 's/-api././')

  # get openshift wildcard domain name
  local le_wildcard=$(\
    oc get ingresscontroller default \
    -n openshift-ingress-operator \
    -o jsonpath='{.status.domain}')
  
  execute """
    acme.sh --renew -d ${le_api} --cert-home ${certdir} ${acme_options} &&
    date '+%Y%m%d%H%M' -d @\$(stat -c %Y ${certdir}/${le_api}/fullchain.cer) > ${certdir}/${le_api}/timestamp
  """  
}
 
main $@
