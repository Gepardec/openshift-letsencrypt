#!/bin/bash

####################### 
# READ ONLY VARIABLES #
#######################

readonly PROGNAME=`basename "$0"`
readonly SCRIPT_HOME=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
readonly SCRIPT_PARENT_DIR=$( cd ${SCRIPT_HOME} && cd .. && pwd )

#################### 
# GLOBAL VARIABLES #
####################

FLAG_DRYRUN=false

########## 
# SOURCE #
##########

for functionFile in ${SCRIPT_HOME}/bash-script-collection/functions/*.sh; do 
  source ${functionFile}
done

##########
# SCRIPT #
##########

usage_message () {
  echo """Usage:
    $PROGNAME [OPT ..]
      --dns)              ... wrapper for acme.sh --dns. e.g. '--dns dns_aws' to use the Amazon Route53 api
      --staging)          ... use staging server, just for test. 

      -d | --dryrun)      ... dryrun
      
      -h | --help)        ... help"""
}
readonly -f usage_message
[ "$?" -eq "0" ] || return $?

main () {
  # INITIAL VALUES
  local acme_options=""
  local certdir=/mnt/openshift/certificates
  
  # GETOPT
  OPTS=`getopt -o dh --long dryrun,help,dns:,staging -- "$@"`
  if [ $? != 0 ]; then
    echo_stderr "failed to fetch options via getopt"
    exit $EXIT_FAILURE
  fi
  eval set -- "$OPTS"
  while true ; do
    case "$1" in
      --dns) 
        acme_options="${acme_options} --dns ${2}"
        if [[ "${2}" == "dns_aws" ]]; then
          execute "aws-wrapper configure list"
        fi
        shift 2
        ;; 
      --staging) 
        acme_options="${acme_options} --staging"
        shift
        ;; 
      -d | --dryrun) 
        FLAG_DRYRUN=true
        shift
        ;; 
      -h | --help) 
        usage_message
        exit 0
        ;;
      *) 
        break
        ;;
    esac
  done

  ####
  # CHECK INPUT
  # check if all required options are given

  ####
  # PREFLIGHT
  
  execute "mkdir -p ${certdir}"
  execute "oc whoami" || echo "it seems you are not logged in to openshift"; exit 1

  ####
  # CORE LOGIC
  
  # get openshift api domain name
  execute "LE_API=\$(\
              oc whoami --show-server | \
              cut -f 2 -d ':' | \
              cut -f 3 -d '/' | \
              sed 's/-api././' \
            )"

  # get openshift wildcard domain name
  execute "LE_WILDCARD=\$(\
              oc get ingresscontroller default \
                -n openshift-ingress-operator \
                -o jsonpath='{.status.domain}'\
            )"
  
  # extract AWS_ACCESS_KEY_ID from aws config file
  execute "AWS_ACCESS_KEY_ID=\$(\
              cat ~/.aws/credentials | \
              grep 'aws_access_key_id = ' | \
              sed 's/aws_access_key_id = //g'\
            )"

  # extract AWS_SECRET_ACCESS_KEY from aws config file
  execute "AWS_SECRET_ACCESS_KEY=\$(\
              cat ~/.aws/credentials | \
              grep 'aws_secret_access_key = ' | \
              sed 's/aws_secret_access_key = //g'\
            )"

  # issue new certificate
  execute " \
    export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} && \
    export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} && \
    acme.sh \
      --issue \
      -d ${LE_API} \
      -d *.${LE_WILDCARD} \
      ${acme_options}"
  
  # Save certificates to host system
  execute "cp -R /root/.acme.sh/* ${certdir}"

  # Add creation timestamp
  execute "date '+%Y%m%d%H%M' -d @\$(stat -c %Y /root/.acme.sh/${LE_API}/fullchain.cer) > ${certdir}/${LE_API}/timestamp"
}
 
main $@
