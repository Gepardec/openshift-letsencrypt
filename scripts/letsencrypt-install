#!/bin/bash

####################### 
# READ ONLY VARIABLES #
#######################

readonly PROGNAME=`basename "$0"`
readonly SCRIPT_HOME=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
readonly SCRIPT_PARENT_DIR=$( cd ${SCRIPT_HOME} && cd .. && pwd )

#################### 
# GLOBAL VARIABLES #
####################

FLAG_DRYRUN=false

########## 
# SOURCE #
##########

for functionFile in ${SCRIPT_HOME}/bash-script-collection/functions/*.sh; do 
  source ${functionFile}
done

##########
# SCRIPT #
##########

usage_message () {
  echo """Usage:
    $PROGNAME [OPT ..]
      -d | --dryrun)   ... dryrun
      
      -h | --help)     ... help"""
}
readonly -f usage_message
[ "$?" -eq "0" ] || return $?

main () {
  # INITIAL VALUES
  local certdir=/mnt/openshift/certificates

  # GETOPT
  OPTS=`getopt -o dh --long dryrun,help -- "$@"`
  if [ $? != 0 ]; then
    print_stderr "failed to fetch options via getopt"
    exit $EXIT_FAILURE
  fi
  eval set -- "$OPTS"
  while true ; do
    case "$1" in
      -d | --dryrun) 
        FLAG_DRYRUN=true;
        shift;
        ;; 
      -h | --help) 
        usage_message; 
        exit 0;
        ;;
      *) 
        break
        ;;
    esac
  done

  ####
  # CHECK INPUT
  # check if all required options are given

  ####
  # PREFLIGHT
  
  execute "oc whoami -c" 
  
  ####
  # CORE LOGIC
  
  # get openshift api domain name
  local le_api=$( \
    oc whoami --show-server |
    cut -f 2 -d ':' |
    cut -f 3 -d '/' |
    sed 's/-api././')

  # get certificate creation timestamp
  local timestamp=$(cat ${certdir}/${le_api}/timestamp || date '+%Y%m%d%H%M')
  execute "echo timestamp=${timestamp}"

  # if certificate is already present in openshift do nothing
  if oc get secret router-certs-${timestamp} \
      -n openshift-ingress \
      >/dev/null \
      2>&1; then
    echo "no certificate update required"
  else
    execute "oc label secrets \
      -n openshift-ingress \
      -l letsencrypt=true \
      --overwrite delete=me"
    execute "oc delete secrets \
      -n openshift-ingress \
      -l letsencrypt=true"
    execute "oc create secret tls router-certs-${timestamp} \
      -n openshift-ingress \
      --cert=${certdir}/${le_api}/fullchain.cer \
      --key=${certdir}/${le_api}/${le_api}.key"
    execute "oc label secrets router-certs-${timestamp} \
       -n openshift-ingress \
       letsencrypt=true"    
    execute "oc patch ingresscontroller default \
       -n openshift-ingress-operator \
       --type=merge \
       --patch='{\"spec\": { \"defaultCertificate\": { \"name\": \"router-certs-${timestamp}\" }}}'"
  fi
}
 
main $@
