#!/bin/bash

####################### 
# READ ONLY VARIABLES #
#######################

readonly PROGNAME=`basename "$0"`
readonly SCRIPT_HOME=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
readonly SCRIPT_PARENT_DIR=$( cd ${SCRIPT_HOME} && cd .. && pwd )

#################### 
# GLOBAL VARIABLES #
####################

FLAG_DRYRUN=false

########## 
# SOURCE #
##########

for functionFile in ${SCRIPT_HOME}/bash-script-collection/functions/*.sh; do 
  source ${functionFile}
done

##########
# SCRIPT #
##########

usage_message () {
  echo """Usage:
    $PROGNAME [OPT ..]
      -p | --project        ... project running the letsencrypt cron job (default: letsencrypt)
      -f | --force          ... remove resources if already existing

      -d | --dryrun)        ... dryrun
      
      -h | --help)          ... help"""
}
readonly -f usage_message
[ "$?" -eq "0" ] || return $?

main () {
  # INITIAL VALUES
  local project="letsencrypt"

  local flag_force=false

  # GETOPT
  OPTS=`getopt -o dhs:r:c:f --long dryrun,help,serviceaccount:,rolename:,cronjob:,force -- "$@"`
  if [ $? != 0 ]; then
    echo "failed to fetch options via getopt"
    exit $EXIT_FAILURE
  fi
  eval set -- "$OPTS"
  while true ; do
    case "$1" in
      -d | --dryrun) 
        FLAG_DRYRUN=true;
        shift;
        ;; 
      -f | --force) 
        flag_force=true;
        shift;
        ;; 
      -h | --help) 
        usage_message; 
        exit 0;
        ;;
      -s | --serviceaccount)  
        serviceaccount=${2}; 
        shift 2;
        ;;
      -p | --project)  
        serviceaccount=${2}; 
        shift 2;
        ;;
      -r | --rolename)  
        rolename=${2}; 
        shift 2;
        ;;
      -c | --cronjob)  
        cronjob=${2}; 
        shift 2;
        ;;
      *) 
        break
        ;;
    esac
  done

  ####
  # CHECK INPUT
  # check if all required options are given

  ####
  # PREFLIGHT
   
  execute "oc whoami -c"
 
  ####
  # CORE LOGIC

  # project
  if oc get \
        -n ${project} \
        -f ${SCRIPT_PARENT_DIR}/resources/letsencrypt/project.yml \
        >/dev/null \
        2>&1; then
    echo "project/letsencrypt exists"
  else
    execute "\
      oc create \
        -n ${project} \
        -f ${SCRIPT_PARENT_DIR}/resources/letsencrypt/project.yml"
  fi

  # imagestream letsencrypt
  if [[ ${flag_force} == true ]]; then
    execute "\
      oc delete \
        -n ${project} \
        -f ${SCRIPT_PARENT_DIR}/resources/letsencrypt/imagestream-letsencrypt.yml \
        --wait=true \
        2>/dev/null"
  fi
  if oc get \
      -n ${project} \
      -f ${SCRIPT_PARENT_DIR}/resources/letsencrypt/imagestream-letsencrypt.yml \
      >/dev/null \
      2>&1; then
    echo "imagestream/letsencrypt exists"
  else
    execute "\
      oc create \
        -n ${project} \
        -f ${SCRIPT_PARENT_DIR}/resources/letsencrypt/imagestream-letsencrypt.yml"
  fi

  # serviceaccount
  if [[ ${flag_force} == true ]]; then
    execute "\
      oc delete \
        -n ${project} \
        -f ${SCRIPT_PARENT_DIR}/resources/letsencrypt/serviceaccount.yml \
        --wait=true \
        2>/dev/null"
  fi
  if oc get \
      -n ${project} \
      -f ${SCRIPT_PARENT_DIR}/resources/letsencrypt/serviceaccount.yml \
      >/dev/null \
      2>&1; then
    echo "serviceaccount/letsencrypt exists"
  else
    execute "\
      oc create \
        -n ${project} \
        -f ${SCRIPT_PARENT_DIR}/resources/letsencrypt/serviceaccount.yml"
  fi

  # project role
  if [[ ${flag_force} == true ]]; then
    execute "\
      oc policy remove-role-from-user letsencrypt \
        -n ${project} \
        --role-namespace=${project} \
        system:serviceaccount:${project}:letsencrypt \
        2>/dev/null"
    execute "\
      oc delete \
        -n ${project} \
        -f ${SCRIPT_PARENT_DIR}/resources/letsencrypt/role-project.yml \
        --wait=true \
        2>/dev/null"
  fi
  if oc get \
      -n ${project} \
      -f ${SCRIPT_PARENT_DIR}/resources/letsencrypt/role-project.yml \
      >/dev/null \
      2>&1; then
    echo "role/letsencrypt in project letsencrypt exists"
  else
    execute "\
      oc create \
        -n ${project} \
        -f ${SCRIPT_PARENT_DIR}/resources/letsencrypt/role-project.yml"
    execute "\
      oc policy add-role-to-user letsencrypt \
        -n ${project} \
        --role-namespace=${project} \
        system:serviceaccount:${project}:letsencrypt"
  fi 

  # openshift-ingress role
  if [[ ${flag_force} == true ]]; then
    execute "\
      oc policy remove-role-from-user letsencrypt \
        -n openshift-ingress  \
        --role-namespace=openshift-ingress \
        system:serviceaccount:${project}:letsencrypt \
        2>/dev/null"
    execute "\
      oc delete \
        -n openshift-ingress \
        -f ${SCRIPT_PARENT_DIR}/resources/letsencrypt/role-openshift-ingress.yml \
        --wait=true \
        2>/dev/null"
  fi
  if oc get \
      -n openshift-ingress \
      -f ${SCRIPT_PARENT_DIR}/resources/letsencrypt/role-openshift-ingress.yml \
      >/dev/null \
      2>&1; then
    echo "role/letsencrypt in project openshift-ingress exists"
  else
    execute "\
      oc create \
        -n openshift-ingress \
        -f ${SCRIPT_PARENT_DIR}/resources/letsencrypt/role-openshift-ingress.yml"
    execute "\
      oc policy add-role-to-user letsencrypt \
        -n openshift-ingress \
        --role-namespace=openshift-ingress \
        system:serviceaccount:${project}:letsencrypt"
  fi   

  # openshift-ingress-operator role
  if [[ ${flag_force} == true ]]; then
    execute "\
      oc policy remove-role-from-user letsencrypt \
        -n openshift-ingress-operator \
        --role-namespace=openshift-ingress \
        system:serviceaccount:${project}:letsencrypt \
        2>/dev/null"
    execute "\
      oc delete \
        -n openshift-ingress-operator \
        -f ${SCRIPT_PARENT_DIR}/resources/letsencrypt/role-openshift-ingress-operator.yml \
        --wait=true \
        2>/dev/null"
  fi  
  if oc get \
      -n openshift-ingress-operator \
      -f ${SCRIPT_PARENT_DIR}/resources/letsencrypt/role-openshift-ingress-operator.yml \
      >/dev/null \
      2>&1; then
    echo "role/letsencrypt in project openshift-ingress-operator exists"
  else
    execute "\
      oc create \
        -n openshift-ingress-operator \
        -f ${SCRIPT_PARENT_DIR}/resources/letsencrypt/role-openshift-ingress-operator.yml"
    execute "\
      oc policy add-role-to-user letsencrypt \
        -n openshift-ingress-operator \
        --role-namespace=openshift-ingress-operator \
        system:serviceaccount:${project}:letsencrypt"
  fi

  # aws creds
  if [[ ${flag_force} == true ]]; then
    execute "\
      oc delete secret letsencrypt-aws-creds \
        -n ${project} \
        --wait=true \
        2>/dev/null"
  fi  
  if oc get secret letsencrypt-aws-creds \
      -n ${project} \
      >/dev/null \
      2>&1; then
    echo "secret/letsencrypt-aws-creds exists"
  else 
    execute "\
      oc create secret generic letsencrypt-aws-creds \
        -n ${project} \
        --from-literal=AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
        --from-literal=AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"
  fi 

  # certificates
  if [[ ${flag_force} == true ]]; then
    execute "\
      oc delete secret letsencrypt-certs \
        -n ${project} \
        --wait=true \
        2>/dev/null"
  fi  
  if oc get secret letsencrypt-certs \
      -n ${project} \
      >/dev/null \
      2>&1; then
    echo "secret/etsencrypt-certs exists"
  else
    local le_api=$(oc whoami --show-server | cut -f 2 -d ':' | cut -f 3 -d '/' | sed 's/-api././')
    local from_file=""
    for item in $(find /mnt/openshift/certificates/${le_api}/ -type f); do
      from_file="${from_file} --from-file=${item}"
    done
    execute "\
      oc create secret generic letsencrypt-certs \
        -n ${project} \
        ${from_file}"
  fi 

  # scripts
   if [[ ${flag_force} == true ]]; then
    execute "\
      oc delete configmap letsencrypt-scripts \
        -n ${project} \
        --wait=true \
        2>/dev/null"
  fi  
  if oc get configmap letsencrypt-scripts \
      -n ${project} \
      >/dev/null \
      2>&1; then
    echo "configmap/letsencrypt-scripts exists"
  else
    execute "\
      oc create configmap letsencrypt-scripts \
        -n ${project} \
        --from-file=/mnt/openshift/scripts/letsencrypt-entrypoint \
        --from-file=/mnt/openshift/scripts/letsencrypt-renew \
        --from-file=/mnt/openshift/scripts/letsencrypt-install"
  fi
  
  # cronjob
   if [[ ${flag_force} == true ]]; then
    execute "\
      oc delete \
        -n ${project} \
        -f ${SCRIPT_PARENT_DIR}/resources/letsencrypt/cronjob.yml \
        --wait=true \
        2>/dev/null"
  fi  
  if oc get \
      -n ${project} \
      -f ${SCRIPT_PARENT_DIR}/resources/letsencrypt/cronjob.yml \
      >/dev/null \
      2>&1; then
    echo "cronjob/letsencrypt exists"
  else
    cert_secret="\
      $(oc get secret \
          -n ${project} \
          -l letsencrypt=true \
          -o custom-columns=NAME:.metadata.name \
          --no-headers=true)"
    execute "\
      oc create \
        -n ${project} \
        -f ${SCRIPT_PARENT_DIR}/resources/letsencrypt/cronjob.yml"
  fi
}
 
main $@
