#!/bin/bash

####################### 
# READ ONLY VARIABLES #
#######################

readonly PROGNAME=`basename "$0"`
readonly SCRIPT_HOME=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
readonly SCRIPT_PARENT_DIR=$( cd ${SCRIPT_HOME} && cd .. && pwd )

#################### 
# GLOBAL VARIABLES #
####################

FLAG_DRYRUN=false

########## 
# SOURCE #
##########

# source other bash scripts here

##########
# SCRIPT #
##########

usage_message () {
  echo """Usage:
    $PROGNAME [OPT ..]
      -d | --dryrun)        ... dryrun
      
      -h | --help)          ... help"""
}
readonly -f usage_message
[ "$?" -eq "0" ] || return $?


# execute $COMMAND [$DRYRUN=false]
# if command and dryrun=true are provided the command will be execuded
# if command and dryrun=false (or no second argument is provided) 
# the function will only print the command the command to stdout
execute () {
  local exec_command=${1}
  local flag_dryrun=${2:-$FLAG_DRYRUN}

  if [[ "${flag_dryrun}" == false ]]; then
     echo "+ ${exec_command}" | xargs echo
     eval "${exec_command}"
  else
    echo "${exec_command}" | xargs echo
  fi
}
# readonly definition of a function throws an error if another function 
# with the same name is defined a second time
readonly -f execute
[ "$?" -eq "0" ] || return $?

main () {
  # INITIAL VALUES

  # GETOPT
  OPTS=`getopt -o dh --long dryrun,help -- "$@"`
  if [ $? != 0 ]; then
    echo "failed to fetch options via getopt"
    exit $EXIT_FAILURE
  fi
  eval set -- "$OPTS"
  while true ; do
    case "$1" in
      -d | --dryrun) 
        FLAG_DRYRUN=true;
        shift;
        ;; 
      -h | --help) 
        usage_message; 
        exit 0;
        ;;
      *) 
        break
        ;;
    esac
  done

  ####
  # CHECK INPUT
  # check if all required options are given

  ####
  # CORE LOGIC

  export KUBECONFIG=/tmp/.kube

  execute "oc login \
    --token $(cat /var/run/secrets/kubernetes.io/serviceaccount/token) \
    --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
    https://api.p.aws.ocp.gepardec.com:6443"

  execute "oc whoami -c"

  LE_API=$(oc whoami --show-server | cut -f 2 -d ':' | cut -f 3 -d '/' | sed 's/-api././')
  execute "mkdir -p /mnt/openshift/certificates/${LE_API}"
  execute "cp /mnt/secret/letsencrypt-certs/* /mnt/openshift/certificates/${LE_API}/"
  if [[ ! -f /mnt/openshift/certificates/${LE_API}/timestamp ]]; then
    execute "date '+%Y%m%d%H%M' > /mnt/openshift/certificates/${LE_API}/timestamp"
  fi
  
  # renew certificates
  execute "${SCRIPT_HOME}/letsencrypt-renew.sh"
  
  # update letsencrypt-certs secret
  local from_file=""
  for item in $(find /mnt/openshift/certificates/${LE_API}/ -type f); do
    from_file="${from_file} --from-file=${item}"
  done
  execute "oc create secret generic letsencrypt-certs \
              -n ${namespace} \
              ${from_file} \
              --dry-run \
              -o yaml | \
           oc apply -f -"
  
  # update ingress
  execute "${SCRIPT_HOME}/letsencrypt-install.sh"
}

main $@