#!/bin/bash

####################### 
# READ ONLY VARIABLES #
#######################

readonly PROGNAME=`basename "$0"`
readonly SCRIPT_HOME=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
readonly SCRIPT_PARENT_DIR=$( cd ${SCRIPT_HOME} && cd ../../.. && pwd )

#################### 
# GLOBAL VARIABLES #
####################

FLAG_DRYRUN=false

########## 
# SOURCE #
##########

for functionFile in ${SCRIPT_HOME}/bash-script-collection/functions/*.sh; do 
  source ${functionFile}
done

##########
# SCRIPT #
##########

usage_message () {
  echo """Usage:
    $PROGNAME [OPT ..]
      -p | --project        ... project running the letsencrypt cron job (default: letsencrypt)
      -f | --force          ... remove resources if already existing

      -d | --dryrun)        ... dryrun
      
      -h | --help)          ... help"""
}
readonly -f usage_message
[ "$?" -eq "0" ] || return $?

main () {
  # INITIAL VALUES
  local project="letsencrypt"

  local flag_force=false

  # GETOPT
  OPTS=`getopt -o dhs:r:c:f --long dryrun,help,serviceaccount:,rolename:,cronjob:,force -- "$@"`
  if [ $? != 0 ]; then
    echo "failed to fetch options via getopt"
    exit $EXIT_FAILURE
  fi
  eval set -- "$OPTS"
  while true ; do
    case "$1" in
      -d | --dryrun) 
        FLAG_DRYRUN=true;
        shift;
        ;; 
      -f | --force) 
        flag_force=true;
        shift;
        ;; 
      -h | --help) 
        usage_message; 
        exit 0;
        ;;
      -s | --serviceaccount)  
        serviceaccount=${2}; 
        shift 2;
        ;;
      -p | --project)  
        serviceaccount=${2}; 
        shift 2;
        ;;
      -r | --rolename)  
        rolename=${2}; 
        shift 2;
        ;;
      -c | --cronjob)  
        cronjob=${2}; 
        shift 2;
        ;;
      *) 
        break
        ;;
    esac
  done

  ####
  # CHECK INPUT
  # check if all required options are given

  ####
  # PREFLIGHT
   
  execute "oc whoami -c"
 
  ####
  # CORE LOGIC

  # project
  if oc get \
        -n ${project} \
        -f ${SCRIPT_PARENT_DIR}/resources/letsencrypt/project.yml \
        >/dev/null \
        2>&1; then
    echo "project/letsencrypt exists"
  else
    execute "\
      oc create \
        -n ${project} \
        -f ${SCRIPT_PARENT_DIR}/resources/letsencrypt/project.yml"
  fi

  execute "helm install openshift-letsencrypt \
      ${SCRIPT_PARENT_DIR}/helm \
      -n letsencrypt \
      --set AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
      --set AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} || \
    helm upgrade openshift-letsencrypt \
      ${SCRIPT_PARENT_DIR}/helm \
      -n letsencrypt \
      --set AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
      --set AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"
}
 
main $@
